---
title: "Clase3: Unión de conjuntos de datos y manejo de fechas e introducción a Gráficos con ggplot2"
author: "David Murillo"
format: html
editor: visual
---

::: panel-tabset
## Cargar paquete y base de datos

```{r}
library(tidyverse)

covid19 <- read.csv("data/covid_19_clean_complete_p1.csv")
day_wise <- read.csv("data/day_wise_p1.csv")
grouped <- read.csv("data/full_grouped_p1.csv")
worldometer <- read.csv("data/worldometer_data_p1.csv")
```

## Unión de conjuntos de datos con dplyr

En esta sección, exploraremos cómo unir conjuntos de datos utilizando `dplyr`. Las funciones más utilizadas para unir tablas son: 

 - `left_join()`: Mantiene todas las filas del primer dataset y agrega coincidencias del segundo. 
 - `right_join()`: Mantiene todas las filas del segundo dataset y agrega coincidencias del primero. 
 - `inner_join()`: Mantiene solo las filas con coincidencias en ambos datasets. 
 - `full_join()`: Mantiene todas las filas de ambos datasets.
 - `semi_join()`: Mantiene solo las filas del primer dataset que tienen coincidencias en el segundo. 
 - `anti_join()`: Mantiene solo las filas del primer dataset que **no** tienen coincidencias en el segundo.

**Ejemplo de `left_join()`:**

```{r}
covid19 <- covid19 %>% 
  left_join(worldometer, by = "Country.Region" )
```

**Ejemplo de `right`_join()`:**

```{r}
covid19 <- covid19 %>% 
  right_join(worldometer, by = "Country.Region" )
```

**Ejemplo de `full_join()`:**

```{r}
covid19 <- covid19 %>% 
  full_join(worldometer, by = "Country.Region" )
```

**Ejemplo de `inner_join()`:**

```{r}
covid19 <- covid19 %>% 
  inner_join(worldometer, by = "Country.Region" )
```

**Ejemplo de `semi_join()`:**

```{r}
covid19 <- covid19 %>% 
  semi_join(worldometer, by = "Country.Region" )
```

**Ejemplo de `anti_join()`:**

```{r}
covid19 <- covid19 %>% 
  anti_join(worldometer, by = "Country.Region" )
```

**Uso de `bind_rows()` y `bind_cols()`:**

-   `bind_rows()`: Une datasets apilando filas.
-   `bind_cols()`: Une datasets agregando columnas.

```{r}
combined_data <- covid19 %>% 
  bind_rows(grouped)
```

------------------------------------------------------------------------

## Introducción a manejo de fechas con lubridate

El paquete `lubridate` facilita la manipulación de fechas en R. Algunas funciones clave incluyen: - `ymd()`: Convierte una fecha en formato Año-Mes-Día. - `mdy()`: Convierte una fecha en formato Mes-Día-Año. - `dmy()`: Convierte una fecha en formato Día-Mes-Año.

**Ejemplo de conversión de fecha:**

```{r}
library(lubridate)

day_wise <- day_wise %>% 
  mutate(Date = ymd(Date))
```

### **Extracción de componentes de la fecha**

Podemos extraer el día, mes y año de una variable de fecha.

```{r}
day_wise <- day_wise %>% 
  mutate(
    Year = year(Date),
    Month = month(Date),
    Day = day(Date)
  )
```

Si la fecha incluye hora y minutos, también podemos extraerlos:

```{r}
day_wise <- day_wise %>% 
  mutate(
    Hour = hour(Date),
    Minute = minute(Date)
  )
```

------------------------------------------------------------------------

## Unión de datos con fechas y formatos de tiempo

Para unir datasets basados en fechas, es crucial asegurarse de que las columnas tengan el mismo formato.

**Ejemplo de unión de datos usando `left_join()` y fechas:**

```{r}
day_wise <- grouped %>% 
  mutate(Date = ymd(Date) ) %>% 
  left_join(day_wise, by = "Date")
```

## Introducción a Gráficos con ggplot2

**Gráfico de línea**

Evolución de casos confirmados

```{r}
ggplot(day_wise, aes(x = Date, y = Confirmed.x)) +
  geom_line(color = "blue", linewidth = 1) +
  labs(title = "Evolución de casos confirmados",
       x = "Fecha",
       y = "Casos confirmados") +
  theme_minimal()
```

**Gráfico de barras**

Nuevos casos por región de la OMS
Este gráfico muestra la cantidad de nuevos casos en cada región de la OMS, resaltando las diferencias entre ellas.

```{r}
ggplot(day_wise, aes(x = WHO.Region, y = New.cases.x, fill = WHO.Region)) +
  geom_bar(stat = "identity") +
  labs(title = "Nuevos casos por región de la OMS",
       x = "Región OMS",
       y = "Nuevos casos") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set3")
```
**Gráfico de dispersión** 

Relación entre casos confirmados y muertes

```{r, warning=FALSE, message=FALSE}
ggplot(day_wise, aes(x = Confirmed.x, y = Deaths.x, color = WHO.Region)) +
  geom_point(alpha = 0.6) +
  labs(title = "Relación entre casos confirmados y muertes",
       x = "Casos confirmados",
       y = "Muertes") +
  theme_minimal() +
  scale_x_log10() +  # Escala logarítmica para mejor visualización
  scale_y_log10() +
  theme(legend.position = "bottom")
```

:::

